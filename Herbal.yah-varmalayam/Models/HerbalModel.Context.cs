//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Herbal.yah_varmalayam.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HerbalEntities : DbContext
    {
        public HerbalEntities()
            : base("name=HerbalEntities")
        {
        }

        public HerbalEntities(string ConnectionString)
            : base(ConnectionString)
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccessRole> AccessRoles { get; set; }
        public virtual DbSet<AppUser> AppUsers { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<PurchaseHeader> PurchaseHeaders { get; set; }
        public virtual DbSet<PurchaseLineItem> PurchaseLineItems { get; set; }
        public virtual DbSet<SalesHeader> SalesHeaders { get; set; }
        public virtual DbSet<StockDetail> StockDetails { get; set; }
        public virtual DbSet<CompanyDetail> CompanyDetails { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
        public virtual DbSet<SalesLineItem> SalesLineItems { get; set; }
    
        public virtual ObjectResult<getPurchaseReport_Result> getPurchaseReport(string purchaseCode, Nullable<int> purchaseId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> productId)
        {
            var purchaseCodeParameter = purchaseCode != null ?
                new ObjectParameter("PurchaseCode", purchaseCode) :
                new ObjectParameter("PurchaseCode", typeof(string));
    
            var purchaseIdParameter = purchaseId.HasValue ?
                new ObjectParameter("PurchaseId", purchaseId) :
                new ObjectParameter("PurchaseId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPurchaseReport_Result>("getPurchaseReport", purchaseCodeParameter, purchaseIdParameter, startDateParameter, endDateParameter, productIdParameter);
        }
    
        public virtual ObjectResult<getSalesReport_Result> getSalesReport(string salesCode, Nullable<int> salesId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> productId)
        {
            var salesCodeParameter = salesCode != null ?
                new ObjectParameter("SalesCode", salesCode) :
                new ObjectParameter("SalesCode", typeof(string));
    
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSalesReport_Result>("getSalesReport", salesCodeParameter, salesIdParameter, startDateParameter, endDateParameter, productIdParameter);
        }
    
        public virtual ObjectResult<getStockReport_Result> getStockReport(Nullable<int> productId, string sortBy, string sortByDirection)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            var sortByDirectionParameter = sortByDirection != null ?
                new ObjectParameter("SortByDirection", sortByDirection) :
                new ObjectParameter("SortByDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStockReport_Result>("getStockReport", productIdParameter, sortByParameter, sortByDirectionParameter);
        }
    }
}
